const hapNodejs = require('hap-nodejs');
const simpleGit = require('simple-git')();
const shellJs = require('shelljs');
const packageJson = require('../package.json');

const platformName = 'homebridge-github-backup';
const platformPrettyName = 'Github Backuper';

let hap;

module.exports = (homebridge) => {
	hap = homebridge.hap;

	homebridge.registerPlatform(platformName, platformPrettyName, BackuperPlatform, true);
};

class BackuperPlatform {
	constructor(log, config) {
		this.log = log;
		this.config = config;

		this.log.info(`Github Backuper Plugin Loaded - version ${packageJson.version}`);
	}

	accessories(callback) {
		callback([
			new Backuper(hap, this.log, this.config),
		]);
	}
}

class Backuper {
	constructor(hap, log, config) {
		this.log = log;
		this.config = config;
		this.name = platformPrettyName;

		this.switchService = new hap.Service.Switch(platformPrettyName);
		this.switchService.getCharacteristic(hap.Characteristic.On)
			.on(hapNodejs.CharacteristicEventTypes.GET, (callback) => {
				callback(undefined, false);
			})
			.on(hapNodejs.CharacteristicEventTypes.SET, (value, callback) => {
				this.backup();
				callback();
			});

		this.informationService = new hap.Service.AccessoryInformation()
			.setCharacteristic(hap.Characteristic.Manufacturer, "Jakub PilaÅ™")
			.setCharacteristic(hap.Characteristic.Model, platformPrettyName);
	}

	backup() {
		const originName = 'origin';

		this.log.info("Starting backup!");
		const date = new Date();
		const tempDirectory = `/tmp/homebridge-backup-${date.getTime()}`;

		if (!shellJs.test('-d', tempDirectory)) {
			shellJs.mkdir(tempDirectory);
		}
		shellJs.cd(tempDirectory);

		this.log.info(tempDirectory);
		this.log.info(shellJs.pwd());

		const username = this.config.githubUsername;
		const password = this.config.githubPassword;
		const repo = this.config.githubRepository;
		const email = this.config.githubEmail;
		const name = this.config.githubName;
		const filesToBackup = this.config.filesToBackup;
		const branch = this.config.branch || 'master';

		const gitHubUrl = `https://${username}:${password}@github.com/${repo}`;

		if (!filesToBackup || !Array.isArray(filesToBackup)) {
			this.log.error('Missing array filesToBackup in config.');
			return;
		}

		const missingFiles = filesToBackup.filter((file) => !shellJs.test('-e', file));
		if (missingFiles.length) {
			this.log.error('There are some non-existing files.');
			this.log.error(missingFiles);
			return;
		}

		shellJs.cp('-R', filesToBackup, tempDirectory);

		simpleGit.cwd(tempDirectory);
		simpleGit.init()
			.addConfig('user.email', email)
			.addConfig('user.name', name)
			.addRemote(originName, gitHubUrl)
			.fetch(originName, branch)
			.pull(originName, branch);

		simpleGit.add('.')
			.commit(`Backup ${date.toUTCString()}`)
			.push(
				originName,
				branch,
				this.log.info('Successfully pushed backup!')
			);

		shellJs.rm('-rf', tempDirectory);
	}

	getServices = () => [
		this.informationService,
		this.switchService,
	];
}
