"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseSensorPlatformAccessory = void 0;
const event_channel_1 = require("../../event-channel");
const nunjucks_1 = __importDefault(require("nunjucks"));
/**
 * Platform Accessory
 * An instance of this class is created for each accessory your platform registers
 * Each accessory may expose multiple services of different service types.
 */
class BaseSensorPlatformAccessory {
    constructor(platform, accessory) {
        var _a, _b, _c;
        this.platform = platform;
        this.accessory = accessory;
        this.configuration = accessory.context.configuration;
        this.currentState = this.initialValue();
        this.template = nunjucks_1.default.compile(this.configuration.value_template || '{{ value }}');
        // set accessory information
        this.accessory.getService(this.platform.Service.AccessoryInformation)
            .setCharacteristic(this.platform.Characteristic.Manufacturer, ((_a = this.configuration.device) === null || _a === void 0 ? void 0 : _a.manufacturer) || 'Homebridge Homeassistant')
            .setCharacteristic(this.platform.Characteristic.Model, ((_b = this.configuration.device) === null || _b === void 0 ? void 0 : _b.model) || 'Homebridge Homeassistant')
            .setCharacteristic(this.platform.Characteristic.SerialNumber, ((_c = this.configuration.device) === null || _c === void 0 ? void 0 : _c.identifiers) || '1');
        this.service = this.createService();
        // set the service name, this is what is displayed as the default name on the Home app
        // in this example we are using the name we stored in the `accessory.context` in the `discoverDevices` method.
        this.service.setCharacteristic(this.platform.Characteristic.Name, this.configuration.name);
        this.configureSensor();
        event_channel_1.EventEmitter.on(`${accessory.UUID}:set-current-state`, (payload) => {
            const value = this.renderValue(payload);
            this.currentState = value;
            this.updateCharacteristic(value);
        });
    }
    payloadToTemplateValue(payload, isJSON = true) {
        const result = {
            value: '',
            value_json: null,
        };
        if (payload) {
            if (payload.payload) {
                result.value = payload.payload;
                if (isJSON) {
                    try {
                        result.value_json = JSON.parse(payload.payload);
                    }
                    catch (e) {
                        this.platform.log.warn(`Error parsing payload although defined as JSON payload (${payload.payload})`);
                    }
                }
            }
        }
        return result;
    }
    renderValue(payload) {
        return this.template.render(this.payloadToTemplateValue(payload));
    }
    async handleHomekitCurrentStateGet() {
        return this.currentState;
    }
}
exports.BaseSensorPlatformAccessory = BaseSensorPlatformAccessory;
//# sourceMappingURL=baseSensorAccessory.js.map