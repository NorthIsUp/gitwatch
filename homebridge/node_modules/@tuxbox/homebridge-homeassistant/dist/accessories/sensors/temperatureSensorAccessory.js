"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemperatureSensorPlatformAccessory = void 0;
const baseSensorAccessory_1 = require("./baseSensorAccessory");
/**
 * Platform Accessory
 * An instance of this class is created for each accessory your platform registers
 * Each accessory may expose multiple services of different service types.
 */
class TemperatureSensorPlatformAccessory extends baseSensorAccessory_1.BaseSensorPlatformAccessory {
    constructor(platform, accessory) {
        super(platform, accessory);
        this.platform = platform;
        this.accessory = accessory;
        this.currentState = 0.0;
    }
    createService() {
        return this.accessory.getService(this.platform.Service.TemperatureSensor) ||
            this.accessory.addService(this.platform.Service.TemperatureSensor);
    }
    configureSensor() {
        // set the service name, this is what is displayed as the default name on the Home app
        // in this example we are using the name we stored in the `accessory.context` in the `discoverDevices` method.
        this.service.setCharacteristic(this.platform.Characteristic.Name, this.configuration.name);
        this.service.getCharacteristic(this.platform.Characteristic.CurrentTemperature)
            .onGet(this.handleHomekitCurrentStateGet.bind(this));
    }
    updateCharacteristic(value) {
        this.service.updateCharacteristic(this.platform.Characteristic.CurrentTemperature, value);
    }
    initialValue() {
        return 0.0;
    }
}
exports.TemperatureSensorPlatformAccessory = TemperatureSensorPlatformAccessory;
//# sourceMappingURL=temperatureSensorAccessory.js.map