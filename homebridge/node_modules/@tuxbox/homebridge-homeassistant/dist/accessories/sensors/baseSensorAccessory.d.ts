import { Service, PlatformAccessory } from 'homebridge';
import { HomeassistantHomebridgePlatform } from '../../platform';
import { DeviceConfiguration } from '../../model/device-configuration';
import { Payload } from '../../model/mqtt-payload';
import { TemplatePayload } from '../../model/templatePayload';
/**
 * Platform Accessory
 * An instance of this class is created for each accessory your platform registers
 * Each accessory may expose multiple services of different service types.
 */
export declare abstract class BaseSensorPlatformAccessory<StateType> {
    protected readonly platform: HomeassistantHomebridgePlatform;
    protected readonly accessory: PlatformAccessory;
    protected service: Service;
    protected readonly configuration: DeviceConfiguration;
    protected currentState: StateType;
    protected template: any;
    constructor(platform: HomeassistantHomebridgePlatform, accessory: PlatformAccessory);
    protected abstract initialValue(): StateType;
    protected abstract createService(): Service;
    protected abstract configureSensor(): any;
    protected abstract updateCharacteristic(value: StateType): any;
    protected payloadToTemplateValue(payload: Payload, isJSON?: boolean): TemplatePayload;
    protected renderValue(payload: Payload): StateType;
    handleHomekitCurrentStateGet(): Promise<StateType>;
}
//# sourceMappingURL=baseSensorAccessory.d.ts.map