import { API, DynamicPlatformPlugin, Logger, PlatformAccessory, PlatformConfig, Service, Characteristic } from 'homebridge';
import { DeviceConfiguration } from './model/device-configuration';
/**
 * HomebridgePlatform
 * This class is the main constructor for your plugin, this is where you should
 * parse the user config and discover/register accessories with Homebridge.
 */
export declare class HomeassistantHomebridgePlatform implements DynamicPlatformPlugin {
    readonly log: Logger;
    readonly config: PlatformConfig;
    readonly api: API;
    readonly Service: typeof Service;
    readonly Characteristic: typeof Characteristic;
    private readonly topicRegEx;
    readonly accessories: PlatformAccessory[];
    private client;
    constructor(log: Logger, config: PlatformConfig, api: API);
    /**
     * This function is invoked when homebridge restores cached accessories from disk at startup.
     * It should be used to setup event handlers for characteristics and update respective values.
     */
    configureAccessory(accessory: PlatformAccessory): void;
    handleDeviceConfiguration(topic: string, configuration: DeviceConfiguration): void;
    handleLockConfiguration(uuid: string, existingAccessory: PlatformAccessory | undefined, configuration: DeviceConfiguration): void;
    handleTemperatureSensorConfiguration(uuid: string, existingAccessory: PlatformAccessory | undefined, configuration: DeviceConfiguration): void;
    handleHumiditySensorConfiguration(uuid: string, existingAccessory: PlatformAccessory | undefined, configuration: DeviceConfiguration): void;
}
//# sourceMappingURL=platform.d.ts.map